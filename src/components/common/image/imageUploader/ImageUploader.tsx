import { forwardRef, useState, useRef, useEffect } from "react";
import * as S from "./ImageUploader.styled";
import { useModalStore } from "../../../../stores/useModalStore";
import { useUserStore } from "../../../../stores/useUserStore";
import { patchProfileImg } from "../../../../api/user";
import { useToastStore } from "../../../../stores/useToastStore";
import Îã¨Î≠â from "../../../../assets/images/Îã¨Î≠â.webp";

interface ImageUploaderProps {
  helperText?: string;
  styleType?: "circle" | "rect";
  defaultPreview?: string; // ÏàòÏ†ï Ïãú Í∏∞Ï°¥ Ïù¥ÎØ∏ÏßÄ Î≥¥Ïó¨Ï£ºÍ∏∞
  onChange?: (previewUrl: string, file: File) => void;
}

const ImageUploader = forwardRef<HTMLInputElement, ImageUploaderProps>(
  (props, ref) => {
    const {
      helperText,
      styleType = "rect",
      defaultPreview = "",
      onChange,
      ...restProps
    } = props;
    const [preview, setPreview] = useState<string | null>(
      defaultPreview || null
    );
    const inputRef = useRef<HTMLInputElement | null>(null);
    const [isOpen, setIsOpen] = useState(false);
    const menuRef = useRef<HTMLUListElement>(null);
    const showToast = useToastStore((s) => s.showToast);
    const user = useUserStore((s) => s.user);
    const openModal = useModalStore((s) => s.openModal);

    const handleToggle = () => {
      if (!user) {
        openModal("login");
        return;
      }
      setIsOpen((prev) => !prev);
    };

    // Î∞îÍπ• ÌÅ¥Î¶≠ Ïãú Îã´Í∏∞
    useEffect(() => {
      const handleClickOutside = (e: MouseEvent) => {
        if (menuRef.current && !menuRef.current.contains(e.target as Node)) {
          setIsOpen(false);
        }
      };
      document.addEventListener("mousedown", handleClickOutside);
      return () =>
        document.removeEventListener("mousedown", handleClickOutside);
    }, []);

    const handleClick = () => {
      inputRef.current?.click();
    };

    const handleChange = (e: React.ChangeEvent<HTMLInputElement>) => {
      const file = e.target.files?.[0];
      if (file) {
        const reader = new FileReader();
        reader.onloadend = () => {
          const result = reader.result as string;
          setPreview(result);
          onChange?.(result, file);
        };
        reader.readAsDataURL(file);
      }
    };

    return (
      <S.Container>
        <S.Input
          type="file"
          accept="image/*"
          ref={(el) => {
            inputRef.current = el;
            if (typeof ref === "function") ref(el);
            else if (ref) ref.current = el;
          }}
          onChange={handleChange} // ‚úÖ Ïù¥Î≤§Ìä∏ Í∞ùÏ≤¥Îäî ÎÇ¥Î∂Ä Ï≤òÎ¶¨Î°úÎßå
          {...restProps}
        />
        <S.ImageBox $styleType={styleType}>
          {preview ? <img src={preview} alt="ÎØ∏Î¶¨Î≥¥Í∏∞" /> : <S.StyledUser />}
          <S.StyledCamera onClick={handleToggle} />
        </S.ImageBox>
        {isOpen && (
          <S.Dropdown ref={menuRef}>
            <li
              onClick={() => {
                setIsOpen(false);
                handleClick();
              }}
            >
              Ïù¥ÎØ∏ÏßÄ Î≥ÄÍ≤Ω
            </li>
            <li
              onClick={() => {
                setIsOpen(false);
                setPreview(Îã¨Î≠â); // üîÅ ÎØ∏Î¶¨Î≥¥Í∏∞ Ï†úÍ±∞
                patchProfileImg(""); // üîÅ ÏÑúÎ≤ÑÏóê Îπà Ïù¥ÎØ∏ÏßÄ keyÎ°ú PATCH ÏöîÏ≤≠
                showToast("Í∏∞Î≥∏ Ïù¥ÎØ∏ÏßÄÎ°ú Î≥ÄÍ≤ΩÎêòÏóàÏäµÎãàÎã§!");
              }}
            >
              Ïù¥ÎØ∏ÏßÄ ÏÇ≠Ï†ú
            </li>
          </S.Dropdown>
        )}
        {helperText && <S.HelperText>{helperText}</S.HelperText>}
      </S.Container>
    );
  }
);

ImageUploader.displayName = "ImageUploader";

export default ImageUploader;
